{% extends 'base.html.twig' %}

{% block title %}Quiz{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .form-control {
            background-color: #f8f9fa !important;
            border-radius: 8px;
            padding: 12px;
        }

        .form-control:focus {
            box-shadow: 0 0 0 3px rgba(118, 199, 192, 0.25);
            border-color: #76c7c0;
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .progress-bar {
            background: #e0e0e0;
            border-radius: 5px;
            height: 10px;
            overflow: hidden;
        }

        .progress {
            background: #76c7c0;
            height: 100%;
            width: 0%;
            transition: width 0.3s ease;
        }

        .question-counter {
            font-size: 14px;
            color: #666;
        }

        .question {
            margin-bottom: 20px;
            opacity: 0;
            transform: translateX(-20px);
            transition: opacity 0.5s ease, transform 0.5s ease;
        }

        .question.active {
            opacity: 1;
            transform: translateX(0);
        }

        .text-danger {
            color: #dc3545;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container-fluid py-5">
        <div class="container">
            <div class="text-center mx-auto wow fadeInUp" data-wow-delay="0.1s" style="max-width: 500px;">
                <p class="fs-5 fw-bold text-primary">Quiz Sant√© Mentale</p>
                <h1 class="display-5 mb-5">R√©pondez aux questions</h1>

                {# Timer ajout√© ici en noir juste apr√®s "Quiz Sant√© Mentale" #}
                <p id="timer-text" style="font-size: 18px; font-weight: bold; color: black;">
                    Temps restant : <span id="timer">03:00</span>
                </p>
                

            </div>
            <div class="row justify-content-center">
                <div class="col-lg-7">
                    <div class="bg-light rounded p-4 p-sm-5 wow fadeInUp" data-wow-delay="0.1s">
                        {{ form_start(form, {'attr': {'class': 'row g-3', 'novalidate': 'novalidate', 'id': 'quiz-form'}}) }}

                        {# Barre de progression #}
                        <div class="col-12">
                            <div class="progress-bar">
                                <div class="progress" id="progress-bar"></div>
                            </div>
                            <div class="question-counter text-center mt-2">
                                Question <span id="current-question">1</span> sur <span id="total-questions">{{ form.children|length }}</span>
                            </div>
                        </div>

                        {# Affichage des questions #}
                        {% for question in form.children %}
                            {% if question.vars.name != '_token' %}
                                <div class="col-12 question mb-4" data-question-id="{{ loop.index }}">
                                    <div class="card border-0 shadow-sm">
                                        <div class="card-body">
                                            <h5 class="card-title text-primary mb-3">{{ form_label(question) }}</h5>
                                            <div class="form-floating">
                                                {{ form_widget(question, {'attr': {'class': 'form-control border-0 bg-light'}}) }}
                                                <div class="text-danger mt-2">{{ form_errors(question) }}</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            {% endif %}
                        {% endfor %}

                        {# Bouton de soumission et message de fin #}
                        <div class="col-12 text-center">
                            {# Message de fin #}
                            <div id="quiz-complete-message" class="alert alert-info mb-3" style="display: none;">
                                Vous avez termin√© le quiz ! Veuillez le soumettre pour consulter votre r√©sultat.
                            </div>

                            {# Bouton de soumission #}
                            <button type="submit" class="btn btn-primary py-3 px-4">Soumettre</button>
                        </div>

                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>

document.addEventListener('DOMContentLoaded', () => {
    const quizForm = document.getElementById('quiz-form');
    const questions = document.querySelectorAll('.question');
    const progressBar = document.getElementById('progress-bar');
    const currentQuestionElement = document.getElementById('current-question');
    const totalQuestions = questions.length;
    const quizCompleteMessage = document.getElementById('quiz-complete-message');
    let currentQuestionIndex = 0;

    // Start timer
    let timeLeft = 180;
    const timerElement = document.getElementById('timer');
    const quizContainer = quizForm.parentElement;

    const timerInterval = setInterval(() => {
        let minutes = Math.floor(timeLeft / 60);
        let seconds = timeLeft % 60;
        let formattedTime = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

        timerElement.textContent = formattedTime;

        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            quizTimeOut();
        }
        timeLeft--;
    }, 1000);

    function quizTimeOut() {
        quizForm.style.display = 'none';

        const message = document.createElement('div');
        message.classList.add('alert', 'alert-danger', 'text-center', 'mt-3');
        message.innerHTML = `
            <h4>‚è≥ Temps √©coul√© !</h4>
            <p>Le temps imparti pour r√©pondre aux questions est termin√©.</p>
            <button id="retryQuiz" class="btn btn-primary mt-2">üîÑ Recommencer</button>
            <button id="quitQuiz" class="btn btn-secondary mt-2">‚ùå Quitter</button>
        `;

        quizContainer.appendChild(message);

        document.getElementById('retryQuiz').addEventListener('click', () => {
            location.reload();
        });

        document.getElementById('quitQuiz').addEventListener('click', () => {
            window.location.href = "{{ path('quiz_list') }}"; // Redirection
        });
    }

    // Masquer toutes les questions sauf la premi√®re
    questions.forEach((question, index) => {
        if (index !== 0) {
            question.style.display = 'none';
        }
    });

    // Mettre √† jour la barre de progression et le compteur
    function updateProgress() {
        const progress = ((currentQuestionIndex + 1) / totalQuestions) * 100;
        progressBar.style.width = `${progress}%`;
        currentQuestionElement.textContent = currentQuestionIndex + 1;
    }

    // V√©rifier si une r√©ponse a √©t√© s√©lectionn√©e
    function hasAnswerSelected(question) {
        const inputs = question.querySelectorAll('input');
        return Array.from(inputs).some(input => input.checked);
    }

    // V√©rifier si toutes les questions ont √©t√© r√©pondues
    function allQuestionsAnswered() {
        return Array.from(questions).every(question => hasAnswerSelected(question));
    }

    // Passer √† la question suivante
    function showNextQuestion() {
        const currentQuestion = questions[currentQuestionIndex];

        // V√©rifier si une r√©ponse a √©t√© s√©lectionn√©e
        if (!hasAnswerSelected(currentQuestion)) {
            alert('Veuillez s√©lectionner une r√©ponse avant de continuer.');
            return;
        }

        if (currentQuestionIndex < totalQuestions - 1) {
            // Masquer la question actuelle avec une animation
            currentQuestion.classList.remove('active');
            setTimeout(() => {
                currentQuestion.style.display = 'none';

                // Afficher la question suivante avec une animation
                currentQuestionIndex++;
                const nextQuestion = questions[currentQuestionIndex];
                nextQuestion.style.display = 'block';
                setTimeout(() => {
                    nextQuestion.classList.add('active');
                }, 10);
                updateProgress();

                // Afficher le message de fin si c'est la derni√®re question
                if (currentQuestionIndex === totalQuestions - 1) {
                    quizCompleteMessage.style.display = 'block';
                }
            }, 500);
        }
    }

    // Emp√™cher la soumission du formulaire si toutes les questions ne sont pas r√©pondues
    quizForm.addEventListener('submit', (event) => {
        if (!allQuestionsAnswered()) {
            event.preventDefault(); // Bloquer la soumission du formulaire
            alert('Veuillez r√©pondre √† toutes les questions avant de soumettre le quiz.');
        }
    });

    // Afficher la premi√®re question avec une animation
    questions[0].style.display = 'block';
    setTimeout(() => {
        questions[0].classList.add('active');
    }, 10);

    // √âcouter les changements de r√©ponse pour passer √† la question suivante
    questions.forEach(question => {
        const inputs = question.querySelectorAll('input');
        inputs.forEach(input => {
            input.addEventListener('change', showNextQuestion);
        });
    });

    // Initialiser la barre de progression
    updateProgress();
});

    </script>
    {# timer secondes #}
    {# const timerInterval = setInterval(() => {
                timeLeft--;
                timerElement.textContent = timeLeft;
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    quizTimeOut();
                }
            }, 1000);

            function quizTimeOut() {
                quizForm.style.display = 'none';
                const message = document.createElement('div');
                message.classList.add('alert', 'alert-danger', 'text-center', 'mt-3');
                message.innerHTML = `
                    <h4>‚è≥ Temps √©coul√© !</h4>
                    <p>Le temps imparti pour r√©pondre aux questions est termin√©.</p>
                    <button id="retryQuiz" class="btn btn-primary mt-2">üîÑ Recommencer</button>
                    <button id="quitQuiz" class="btn btn-secondary mt-2">‚ùå Quitter</button>
                `;
                quizContainer.appendChild(message);
                document.getElementById('retryQuiz').addEventListener('click', () => location.reload());
                document.getElementById('quitQuiz').addEventListener('click', () => window.location.href = "{{ path('quiz_list') }}");
            } #}
{% endblock %}